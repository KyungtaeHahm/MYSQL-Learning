/*

- LOCK

보통 서버쪽을 취업하기 위해서 DB를 공부하고 가긴하는데 근데 SQL 기초 책을 보면 LOCK나 멀티쓰레딩에 대한 내용이 없음...

- 만약 다중 쓰레딩에서 SELECT나 UPDATE를 동시에 때리면 멀티쓰레딩 안전하게 처리해주는게 이상했음

- DB 덕목은

1) 많이 2) 빠르게 3) 안전하게

ㄴ 멀티쓰레딩 환경에서 잘 동작한다. 즉, 여러 커넥션 쿼리를 날려도 정상 동작해야한다!

멀티쓰레딩하면 생각해야 하는게..

만약 동시다발적으로 같은 테이블에 똑같은 구문 UPDATE SQL을 날리면 어떻게 될까???

[예씨]

고객 2명이 물건을 동시에 맡김.

( 전에 살펴볼 때 백그라운드 직원이 임시창고에 저장된걸 물류창고에 옮김.)

- 근데 백그라운드 직원에게 룰이 있음. 동시에 하는게 아니라 한명이 작업을 하고 끝나면 다음 직원이 일을 처리함.
 이러한 방식이 락)
 
 - 동시다발적으로 행동이 일어나지 못하게 함 (화장실 비유)


 [ 락 구현 복습 ]

 비행기 화장실 예시

 - 한 번에 한명만 들어갈 수 있고, 안에 들어가서 잠그면
 ㄴ 그 다음 사람은 자물쇠를 풀어주기 직전까지 못들어감

 이러한 락을 상호배타적인 LOCK 이라고 함 ( A가 들어가서 잠그면 다음 사람은 A가 LOCK을 풀기 전까지 못 나감)


 - READ-LOCK : 일반 사람들이 사이좋게 이용 가능 (락을 거는 의미가 없을 정도로 공유하는 락. 쉐어드락이라고도 함)


 [ WRITER LOCK]

 - VIP 등장.. 더러운 자본주의. 상호배타적인 관계

 -LOCK을 걸면 동급인 VIP도 못들어감.


 - 이 3가지를 동시에 사용하면 좋음. READ / WRITER / READER-WRITER LOCK


 [ 락 종류 ]

 1) Shard (S)
- READ (SELECT)

2) Exclusive (X)
- DML (INSERT, UPDATE, DELETE)

3) Update (U)
- S와 X의 중간쯤


[ LOCK을 걸 수 있는 대상 ]

행(ROW) 별로 걸 수 있고~ 테이블만 걸 수 있고~ 데이터 베이스 전체를 LOCK을 걸 수 있다.

DB는 모두 락을 걸 수 있음 - Database Table Page Row

[ GRANULARITY ]

상황에 따라 락을 걸게 됨. 

		->
	락 범위가 작음 ( 병렬처리 Good )
Database Table Page Row
		<-
   자원 소모가 덜함

    ROW - 병렬처리에 좋지만 자원소모가 심하다.
	ㄴ 보통 ROW 하나만 거는 게 아니고 UPDATE를 한다는 가정하에 5000개 10000개 걸 수 있음.
	ㄴ 이럴 때 row의 몸뚱이인 Page에 락을 걸어 효율적으로 이용 시킬 수가 있음.


	[ DEADLOCK ]

	A, B가 의 자물쇠방을 동시에 획득해야한다고 할 때,

	두 사람이 동시에 할 경우 

	A가 위의 자물쇠를 잠그고, B가 아래 자물쇠를 잠글 때

	두 사람다 못 들어가는 상황이 데드락.

	ㄴ 무한하게 대기하지 않고 한쪽이 롤백함.

	- 결론 : SQL 구문을 사용해 데이터베이스를 날릴 때 멀티스레딩에 대한 동시다발적으로 접근에 대한 처리는 이미 다 되어있음.

	LOCK을 걸고 하지 않아도 크게 문제는 없다.

*/