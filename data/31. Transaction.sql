
/*
- TRANSACTION - 트랜젝션

- Transaction 의 ACID 특성

1) A 원자성 - All or Nothing = 아예 모든게 완료되거나 아예 일어나지 않거나. 애매하게 반만 되는 경우는 없다
아토믹
2) C 일관성 - 데이터 간의 일관성 보장 ( 데이터와 인덱스간 불일치 등 )

3) I 고립성 - 트랜잭션을 단독으로 실행하나 다른 트랜잭션과 실행하나 똑같다

4) D 지속성 - 장애가 발생하더라도 데이터는 반드시 복구가 가능해야한다!

[ 관심을 가져야 할 건 A와 D ]

1) A 원자성 

- 플레이어 골드 감소 & 아이템을 인벤토리에 추가. 둘이 동시에 실행되야함

2) D (Durability) 지속성

- 장애가 발생하더라도 데이터는 반드시 복구 가능

- 절반만 하고 정전이 일어나더라도 & 무조건 디스크에 저장

근데 A와 D가 동시에 일어는게 신기함..

- SQL 구문 실패할 수 도 있고. 지속성에 의한 디스크가 고장나거나... 원자성이 완료되지 않을 수 있는데..

ㄴ 어떻게 보장하는지 상식적으로 이해가 어려움.

-> 그래서 어떻게 그걸 알고 ROLLBACK을 시키는가?

[ 비밀을 알아보자 ]

- 무언가를 할 떄 DB에서 로그를 남김
- REDO, UNDO

1) 클라 - 골드-- , 아이템 ++ 요청이 오면

2) 바로 디스크에 두지않고 RAM에 해당 로그를 남김

3) 그리고 임시창고에 있는 걸 누군가가 로그를 들고 창고에 저장시킴.

- 즉 로그를 남기고 추적하는 건 계속 이뤄지고 있다.

[ 만약 골드 30에서 20을 줄이는 건 됬는데 정전이 일어나서 초록물약을 주지 못했다면? ]

- 이럴 경우 임시창고에서 로그를 확인해서 비교함.
ㄴ 1) 롤백을 시키거나 완료를 시켜버림
ㄴ 해당 과정은 엄청 복잡하기에 DB 책을 살펴봐야함 (응용개발자로써 거기까진 알지 않아도됨)

[결론]

1) 실제 데이터를 바로 하드디스크에 반영하진 않고, 로그를 이용

2) 중간단계인 REDO (BEFORE -> AFTER), UNDO (AFTER->BEFORE) 를 이용

3) 미래로 간다 (ROLL FORWARD)

4) 과거로 간다 (ROLL BACK)

5) 데이터베이스 장애가 발생하더라도 로그를 이용해 복구 / 롤백


*/